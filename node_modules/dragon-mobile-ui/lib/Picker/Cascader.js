'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

var _ColumnGroup = require('./ColumnGroup');

var _ColumnGroup2 = _interopRequireDefault(_ColumnGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cascader = function (_Component) {
  _inherits(Cascader, _Component);

  function Cascader(props) {
    _classCallCheck(this, Cascader);

    var _this = _possibleConstructorReturn(this, (Cascader.__proto__ || Object.getPrototypeOf(Cascader)).call(this, props));

    _this.state = {
      value: _this.getValue(_this.props.data, _this.props.defaultValue || _this.props.value)
    };
    return _this;
  }

  _createClass(Cascader, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: this.getValue(nextProps.data, nextProps.value)
        });
      }
    }
  }, {
    key: 'onValueChange',
    value: function onValueChange(value, index) {
      var _this2 = this;

      var children = (0, _utils.arrayTreeFilter)(this.props.data, function (item, level) {
        return level <= index && item[_this2.props.valueMember] === value[level];
      });
      var data = children[index];
      var i = void 0;
      for (i = index + 1; data && data.children && data.children.length && i < this.props.cols; i += 1) {
        data = data.children[0];
        value[i] = data[this.props.valueMember];
      }
      value.length = i;

      if (!('value' in this.props)) {
        this.setState({
          value: value
        });
      }
      this.props.onChange(value);
    }
  }, {
    key: 'getCols',
    value: function getCols() {
      var _this3 = this;

      var _props = this.props,
          data = _props.data,
          cols = _props.cols;

      var value = this.state.value;
      var childrenTree = (0, _utils.arrayTreeFilter)(data, function (item, level) {
        return item[_this3.props.valueMember] === value[level];
      }).map(function (c) {
        return c.children;
      });
      childrenTree.length = cols - 1;
      childrenTree.unshift(data);

      return childrenTree.map(function (children) {
        return {
          props: {
            children: children || []
          }
        };
      });
    }
  }, {
    key: 'getValue',
    value: function getValue(d, val) {
      var data = d || this.props.data;
      var value = val || this.props.value || this.props.defaultValue;
      if (!value || !value.length) {
        value = [];
        for (var i = 0; i < this.props.cols; i += 1) {
          if (data && data.length) {
            value[i] = data[0][this.props.valueMember];
            data = data[0].children;
          }
        }
      }

      return value;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props2 = this.props,
          prefixCls = _props2.prefixCls,
          pickerPrefixCls = _props2.pickerPrefixCls,
          className = _props2.className,
          displayMember = _props2.displayMember,
          valueMember = _props2.valueMember;


      return _react2.default.createElement(
        _ColumnGroup2.default,
        {
          prefixCls: prefixCls,
          pickerPrefixCls: pickerPrefixCls,
          className: className,
          displayMember: displayMember,
          valueMember: valueMember,
          selectedValue: this.state.value,
          onValueChange: function onValueChange(value, index) {
            return _this4.onValueChange(value, index);
          } },
        this.getCols()
      );
    }
  }]);

  return Cascader;
}(_react.Component);

Cascader.propTypes = {
  prefixCls: _react.PropTypes.string,
  pickerPrefixCls: _react.PropTypes.string
};

Cascader.defaultProps = {
  cols: 3,
  prefixCls: '',
  pickerPrefixCls: '',
  data: [],
  disabled: false
};

exports.default = Cascader;