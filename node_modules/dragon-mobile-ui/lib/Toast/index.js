'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _Mask = require('../Mask');

var _Mask2 = _interopRequireDefault(_Mask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toast = function (_Component) {
  _inherits(Toast, _Component);

  function Toast(props) {
    _classCallCheck(this, Toast);

    var _this = _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).call(this, props));

    _this.state = {
      isShow: false,
      timer: undefined
    };
    return _this;
  }

  _createClass(Toast, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.visible) {
        this.enter();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      clearTimeout(this.state.timer);

      if (nextProps.visible) {
        this.enter();
      } else {
        this.leave();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this.state.timer);
    }
  }, {
    key: 'enter',
    value: function enter() {
      var _this2 = this;

      var _props = this.props,
          duration = _props.duration,
          onMaskClick = _props.onMaskClick;


      this.setState({
        isShow: true
      });

      if (duration === 0) {
        return;
      }

      this.state.timer = setTimeout(function () {
        onMaskClick();
        clearTimeout(_this2.state.timer);
      }, duration);
    }
  }, {
    key: 'leave',
    value: function leave() {
      this.setState({
        isShow: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          visible = _props2.visible,
          children = _props2.children,
          onMaskClick = _props2.onMaskClick,
          className = _props2.className;


      var cls = (0, _classnames3.default)(_defineProperty({
        'ui-toast': true,
        'ui-toast-open': this.state.isShow
      }, className, !!className));

      return _react2.default.createElement(
        'div',
        { className: cls },
        _react2.default.createElement(
          'div',
          { className: 'ui-toast-container' },
          children
        ),
        _react2.default.createElement(_Mask2.default, { visible: visible, type: 'transparent', onClose: onMaskClick })
      );
    }
  }]);

  return Toast;
}(_react.Component);

Toast.propTypes = {
  visible: _react.PropTypes.bool,
  duration: _react.PropTypes.number,
  onMaskClick: _react.PropTypes.func
};

Toast.defaultProps = {
  visible: false,
  duration: 3000,
  onMaskClick: function onMaskClick() {}
};

exports.default = Toast;